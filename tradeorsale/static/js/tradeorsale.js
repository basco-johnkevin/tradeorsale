// Generated by CoffeeScript 1.4.0
(function() {
  var Item, ItemImage, ItemImages, ItemTag, ItemTags, TradeOrSale, imagePreloader, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  TradeOrSale = {
    apiVersion: 'v1',
    errorMsgs: {
      required: "This field is required",
      invalidPrice: "Invalid price",
      invalidQuantity: "Invalid quantity",
      createTagPermissionDenied: "You don't have enough privilege yet to create new tags"
    }
  };

  ItemImage = (function(_super) {

    __extends(ItemImage, _super);

    function ItemImage() {
      return ItemImage.__super__.constructor.apply(this, arguments);
    }

    ItemImage.prototype.defaults = {
      item_id: '',
      original: '',
      medium: '',
      small: ''
    };

    ItemImage.prototype.urlRoot = function() {
      return '/' + TradeOrSale.apiVersion + '/users/' + currentUser.id + '/items/' + this.get('item_id');
    };

    return ItemImage;

  })(Backbone.Model);

  ItemImages = (function(_super) {

    __extends(ItemImages, _super);

    function ItemImages() {
      return ItemImages.__super__.constructor.apply(this, arguments);
    }

    ItemImages.prototype.model = ItemImage;

    return ItemImages;

  })(Backbone.Collection);

  ItemTag = (function(_super) {

    __extends(ItemTag, _super);

    function ItemTag() {
      return ItemTag.__super__.constructor.apply(this, arguments);
    }

    ItemTag.prototype.defaults = {
      name: ''
    };

    ItemTag.prototype.urlRoot = '/item/tags';

    return ItemTag;

  })(Backbone.Model);

  ItemTags = (function(_super) {

    __extends(ItemTags, _super);

    function ItemTags() {
      return ItemTags.__super__.constructor.apply(this, arguments);
    }

    ItemTags.prototype.model = ItemTag;

    ItemTags.prototype.findByName = function(tagName) {
      return this.find(function(tag) {
        if (tag.get('name') === tagName) {
          return tag;
        }
      });
    };

    return ItemTags;

  })(Backbone.Collection);

  Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      id_b36: '',
      name: '',
      type: 'TRADE',
      trade_with: '',
      price: '',
      quantity: 1,
      original_quantity: 1,
      description: '',
      reason: '',
      is_draft: false,
      tags: new ItemTags(),
      created: '',
      transaction_date: ''
    };

    Item.prototype.url = function() {
      var url;
      url = this.urlRoot();
      if (!this.isNew()) {
        url += '/' + this.id;
      }
      return url;
    };

    Item.prototype.urlRoot = function() {
      return '/' + TradeOrSale.apiVersion + '/users/' + currentUser.id + '/items';
    };

    Item.prototype.validators = {
      price: function(value) {
        return /^\d[\d.,]*$/.test(value);
      },
      quantity: function(value) {
        return /^\d+$/.test(value) && parseInt(value, 10) > 0;
      }
    };

    Item.prototype.initialize = function() {
      this.images = new ItemImages();
      return this.pendingTags = new ItemTags();
    };

    Item.prototype.validate = function(attrs) {
      var errors;
      errors = this.errors = {};
      console.log(attrs);
      if (attrs.name != null) {
        if (!attrs.name) {
          errors['name'] = TradeOrSale.errorMsgs['required'];
        }
      }
      if (attrs.description != null) {
        if (!attrs.description) {
          errors['description'] = TradeOrSale.errorMsgs['required'];
        }
      }
      if (attrs.price != null) {
        if ((attrs.type === 'SALE' || !(attrs.type != null)) && !attrs.price) {
          errors['price'] = TradeOrSale.errorMsgs['required'];
        }
        if (attrs.price && !this.validators['price'](attrs.price)) {
          errors['price'] = TradeOrSale.errorMsgs['invalidPrice'];
        }
      }
      if (attrs.trade_with != null) {
        if ((attrs.type === 'TRADE' || !(attrs.type != null)) && !attrs.trade_with) {
          errors['trade_with'] = TradeOrSale.errorMsgs['required'];
        }
      }
      if (attrs.quantity != null) {
        if (attrs.quantity && !this.validators['quantity'](attrs.quantity)) {
          errors['quantity'] = TradeOrSale.errorMsgs['invalidQuantity'];
        }
        if (!attrs.quantity) {
          errors['quantity'] = TradeOrSale.errorMsgs['required'];
        }
      }
      if (!_.isEmpty(errors)) {
        return errors;
      }
    };

    return Item;

  })(Backbone.Model);

  imagePreloader = new Image;

  imagePreloader.className = 'preloader';

  imagePreloader.src = baseUrl + '/static/images/image-preloader.gif';

  TradeOrSale.Item = Item;

  TradeOrSale.ItemImage = ItemImage;

  TradeOrSale.ItemTag = ItemTag;

  TradeOrSale.ItemTags = ItemTags;

  TradeOrSale.ItemImages = ItemImages;

  TradeOrSale.imagePreloader = imagePreloader;

  root.TradeOrSale = TradeOrSale;

}).call(this);
