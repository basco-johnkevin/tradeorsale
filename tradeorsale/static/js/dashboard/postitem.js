// Generated by CoffeeScript 1.4.0
(function() {
  var PostItemView, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  TradeOrSale.postItemView = null;

  PostItemView = (function(_super) {

    __extends(PostItemView, _super);

    function PostItemView() {
      this.removeAllImagesThumb = __bind(this.removeAllImagesThumb, this);

      this.removeImageThumb = __bind(this.removeImageThumb, this);

      this.initFileDrop = __bind(this.initFileDrop, this);
      return PostItemView.__super__.constructor.apply(this, arguments);
    }

    PostItemView.prototype.template = '#post-item-template';

    PostItemView.prototype.id = 'post-item';

    PostItemView.prototype.className = 'popup';

    PostItemView.prototype.events = {
      'change #name': 'nameChanged',
      'change #type': 'typeChanged',
      'change #trade_with': 'tradeWithChanged',
      'change #price': 'priceChanged',
      'change #quantity': 'quantityChanged',
      'change #description': 'descriptionChanged',
      'change #reason': 'reasonChanged',
      'change #is_draft': 'isDraftChanged',
      'click #close-new-item': 'closePostItem',
      'click #submit-new-item': 'submitNewItem',
      'click .images-masonry li': 'removeImageThumb',
      'click .right-pane .note .clear-all': 'removeAllImagesThumb'
    };

    PostItemView.prototype.initialize = function() {
      $("#content").hide();
      this.template = Handlebars.compile($(this.template).html());
      this.render();
      this.$('#price').parents('.control-group').hide();
      return this.initFileDrop();
    };

    PostItemView.prototype.render = function() {
      return $(this.el).html(this.template());
    };

    PostItemView.prototype.initFileDrop = function() {
      var _this = this;
      this.uuid = UUID.create().hex;
      this.uploadHandlers = {};
      this.failedUploadCounter = 0;
      return this.fileDrop = this.$('.drop-zone').filedrop({
        url: function() {
          return '/' + TradeOrSale.apiVersion + '/users/' + currentUser.id + '/items/' + _this.model.id + '/images';
        },
        paramname: 'image',
        data: {
          uuid: this.uuid
        },
        error: function(err, file) {
          switch (err) {
            case 'BrowserNotSupported':
              return console.log("Browser doesn't support html5");
            case 'TooManyFiles':
              return console.log("Uploading too many files");
            case 'FileTooLarge':
              return console.log("Uploading too large file");
            case 'FileTypeNotAllowed':
              _this._resetRightPane();
              return console.log("Invalid file type");
          }
        },
        allowedfiletypes: ['image/jpeg', 'image/png'],
        maxfiles: 24,
        maxfilesize: 10,
        drop: function() {
          var ulTag;
          ulTag = document.createElement('ul');
          _this.$(".right-pane .drop-zone").hide();
          _this.$(".right-pane .images-masonry").append(ulTag);
          return _this.$(".right-pane .note").show();
        },
        uploadFinished: function(i, file, response, time) {
          var image;
          if (response.status === 'FAILED') {
            _this.$(".right-pane .image-" + i).remove();
            return _this.failedUploadCounter += 1;
          } else {
            image = new TradeOrSale.ItemImage({
              id: response.sizes.id,
              item_id: response.item_id,
              original: response.sizes.original,
              medium: response.sizes.medium,
              small: response.sizes.small
            });
            return _this.model.images.add(image);
          }
        },
        progressUpdated: function(i, file, progress) {
          var newFilter;
          newFilter = 'grayscale(' + (100 - progress) + '%)';
          _this.$(".right-pane .image-" + i + " img").css('filter', newFilter);
          _this.$(".right-pane .image-" + i + " img").css('-webkit-filter', newFilter);
          return _this.$(".right-pane .image-" + i + " img").css('-moz-filter', newFilter);
        },
        globalProgressUpdated: function(progress) {
          return _this.$("#upload-stats").html(progress + '%');
        },
        beforeEach: function(i, file) {
          var imgTag, innerTag, liTag, reader;
          liTag = document.createElement('li');
          liTag.className = 'image-' + i;
          innerTag = document.createElement('div');
          innerTag.className = 'inner';
          imgTag = document.createElement('img');
          innerTag.appendChild(imgTag);
          reader = new FileReader();
          reader.onload = function(e) {
            imgTag.src = e.target.result;
            return _this.$(".right-pane ul").append(liTag);
          };
          reader.readAsDataURL(file);
          return liTag.appendChild(innerTag);
        },
        beforeSend: function(file, i, done) {
          return _this.uploadHandlers[i] = {
            handler: done,
            file: file
          };
        },
        afterAll: function() {
          return _this.finishUpload();
        },
        removeElement: function(index) {
          var newIndex, nextIndex, remainingLi, subIndex, _i, _results;
          nextIndex = index + 1;
          remainingLi = _this.$(".right-pane ul li").length;
          _results = [];
          for (subIndex = _i = nextIndex; nextIndex <= remainingLi ? _i <= remainingLi : _i >= remainingLi; subIndex = nextIndex <= remainingLi ? ++_i : --_i) {
            newIndex = subIndex - 1;
            _results.push(_this.$('.right-pane ul li.image-' + subIndex).attr('class', 'image-' + newIndex));
          }
          return _results;
        }
      });
    };

    PostItemView.prototype.removeImageThumb = function(e) {
      var handlerInfo, index, indexToShift, subIndex, _i, _len;
      e.preventDefault();
      index = $(e.currentTarget).attr('class').split('-')[1];
      delete this.uploadHandlers[index];
      indexToShift = _.filter(_.keys(this.uploadHandlers), function(subIndex) {
        if (subIndex > index) {
          return true;
        } else {
          return false;
        }
      });
      indexToShift.sort();
      for (_i = 0, _len = indexToShift.length; _i < _len; _i++) {
        subIndex = indexToShift[_i];
        handlerInfo = this.uploadHandlers[subIndex];
        delete this.uploadHandlers[subIndex];
        this.uploadHandlers[subIndex - 1] = handlerInfo;
      }
      $(e.currentTarget).remove();
      if (this.$(".right-pane ul li").length === 0) {
        this._resetRightPane();
      }
      return this.fileDrop.removeElement(index);
    };

    PostItemView.prototype.removeAllImagesThumb = function(e) {
      e.preventDefault();
      return this._resetRightPane();
    };

    PostItemView.prototype.displayError = function(field) {
      var errorMsg, fieldEl;
      fieldEl = this.$("#" + field);
      this.clearFieldError(field);
      if ((this.model.errors != null) && field in this.model.errors) {
        fieldEl.parents('.control-group').addClass('error');
        errorMsg = document.createElement('span');
        errorMsg.className = 'help-inline error';
        errorMsg.innerHTML = this.model.errors[field];
        return fieldEl.parents('.controls').append(errorMsg);
      }
    };

    PostItemView.prototype.nameChanged = function(e) {
      e.preventDefault();
      this.model.set({
        name: $(e.currentTarget).val()
      }, {
        validateAll: false
      });
      return this.displayError('name');
    };

    PostItemView.prototype.typeChanged = function(e) {
      var newType;
      e.preventDefault();
      newType = $(e.currentTarget).val();
      if (newType === 'SALE') {
        this.$('#trade_with').parents('.control-group').hide();
        this.$('#price').parents('.control-group').show();
        this.$('#price').focus();
      } else {
        this.$('#trade_with').parents('.control-group').show();
        this.$('#price').parents('.control-group').hide();
        this.$('#price').val('').change();
      }
      this.model.set({
        type: newType
      }, {
        silent: true,
        validateAll: false
      });
      return this.displayError('type');
    };

    PostItemView.prototype.tradeWithChanged = function(e) {
      e.preventDefault();
      this.model.set({
        trade_with: $(e.currentTarget).val()
      }, {
        validateAll: false
      });
      return this.displayError('trade_with');
    };

    PostItemView.prototype.priceChanged = function(e) {
      var price;
      e.preventDefault();
      price = $(e.currentTarget).val();
      this.model.set({
        price: price
      }, {
        validateAll: false
      });
      return this.displayError('price');
    };

    PostItemView.prototype.quantityChanged = function(e) {
      var quantity;
      e.preventDefault();
      quantity = $(e.currentTarget).val();
      this.model.set({
        quantity: quantity
      }, {
        validateAll: false
      });
      return this.displayError('quantity');
    };

    PostItemView.prototype.descriptionChanged = function(e) {
      e.preventDefault();
      this.model.set({
        description: $(e.currentTarget).val()
      }, {
        validateAll: false
      });
      return this.displayError('description');
    };

    PostItemView.prototype.reasonChanged = function(e) {
      e.preventDefault();
      return this.model.set({
        reason: $(e.currentTarget).val()
      }, {
        validateAll: false
      });
    };

    PostItemView.prototype.isDraftChanged = function(e) {
      e.preventDefault();
      if (this.$('#is_draft').attr('checked') !== void 0) {
        return this.$('#is_draft').val('y');
      } else {
        return this.$('#is_draft').val('');
      }
    };

    PostItemView.prototype.submitNewItem = function(e) {
      var _this = this;
      e.preventDefault();
      this.model.set({
        name: this.$('#name').val(),
        type: this.$('#type').val(),
        price: this.$('#price').val(),
        quantity: this.$('#quantity').val(),
        description: this.$('#description').val(),
        reason: this.$('#reason').val(),
        is_draft: this.$('#is_draft').val()
      }, {
        validateAll: true
      });
      if (!_.isEmpty(this.model.errors)) {
        this._displayEachError();
        return this._showAlert('error', "Something wen't wrong while trying to add your item");
      } else {
        this.disableForm();
        return this.model.save({
          uuid: this.uuid
        }, {
          wait: true,
          success: function(model, response, options) {
            var itemTags;
            delete model.attributes.uuid;
            _this.model = model;
            itemTags = new TradeOrSale.ItemTags();
            itemTags.reset(_this.model.get('tags'));
            _this.model.set('tags', itemTags);
            if (_.size(_this.uploadHandlers) === 0) {
              return _this.finishUpload();
            } else {
              return _.each(_this.uploadHandlers, function(handlerInfo, i) {
                return handlerInfo.handler(i);
              });
            }
          },
          error: function(model, xhr, options) {
            model.errors = $.parseJSON(xhr.responseText);
            _this.model = model;
            _this._displayEachError();
            _this.enableForm();
            return _this._showAlert('error', "Something wen't wrong while trying to add your item");
          }
        });
      }
    };

    PostItemView.prototype.closePostItem = function(e) {
      if (e !== void 0) {
        e.preventDefault();
      }
      $(this.el).hide();
      $("#content").show();
      return $("#btn-post-item-parent").removeClass('active');
    };

    PostItemView.prototype.openPostItem = function() {
      $("#content").hide();
      $(this.el).show();
      return $("#btn-post-item-parent").addClass('active');
    };

    PostItemView.prototype.disableForm = function() {
      this.$('form').find(':input:not(:disabled)').prop('disabled', true);
      $(this.el).undelegate('.images-masonry li', 'click');
      this.$('.images-masonry li').css('cursor', 'default');
      return this.$(".right-pane .note").hide();
    };

    PostItemView.prototype.enableForm = function() {
      this.$('form').find(':input:disabled').prop('disabled', false);
      $(this.el).delegate('.images-masonry li', 'click', this.removeImageThumb);
      this.$('.images-masonry li').css('cursor', 'pointer');
      if (this.$('.images-masonry li').length > 0) {
        return this.$(".right-pane .note").show();
      }
    };

    PostItemView.prototype.resetForm = function() {
      this._resetLeftPane();
      this._resetRightPane();
      return this.failedUploadCounter = 0;
    };

    PostItemView.prototype.finishUpload = function() {
      var msg, plural;
      this._showAlert('success', 'Item has successfully been added');
      if (this.failedUploadCounter > 0) {
        plural = this.failedUploadCounter > 1 ? 'images' : 'image';
        msg = "" + this.failedUploadCounter + " " + plural + " failed to upload,        make sure they have valid file name";
        this._showAlert('alert', msg, false);
      }
      delete this.model.attributes.images;
      this.model.addingMechanism = 'prepend';
      if (this.model.get('is_draft') === 'y' && (TradeOrSale.Dashboard.draftsPanel != null)) {
        TradeOrSale.Dashboard.draftsPanel.collection.add(this.model, {
          at: 0
        });
      } else {
        TradeOrSale.Dashboard.ongoingPanel.collection.add(this.model, {
          at: 0
        });
      }
      this.enableForm();
      return this.resetForm();
    };

    PostItemView.prototype.showTagError = function(msg) {
      var errorMsg, fieldEl;
      fieldEl = this.$("#tags");
      this.clearFieldError('tags');
      fieldEl.parents('.control-group').addClass('error');
      errorMsg = document.createElement('span');
      errorMsg.className = 'help-inline error';
      errorMsg.innerHTML = msg;
      return fieldEl.parents('.controls').append(errorMsg);
    };

    PostItemView.prototype.clearFieldError = function(field) {
      var fieldEl;
      fieldEl = this.$("#" + field);
      if (fieldEl.parents(".control-group").find('.help-inline.error').length > 0) {
        fieldEl.parents('.control-group').removeClass('error');
        return fieldEl.parents(".control-group").find('.help-inline.error').remove();
      }
    };

    PostItemView.prototype._showAlert = function(type, msg, destructive) {
      var alertTag, closeBtn;
      if (destructive == null) {
        destructive = true;
      }
      this.$("#alert-wrapper").hide();
      if (destructive) {
        this.$("#alert-wrapper .alert").remove();
      }
      alertTag = document.createElement('div');
      alertTag.className = 'alert';
      if (type !== 'alert') {
        alertTag.className += ' alert-' + type;
      }
      closeBtn = document.createElement('button');
      closeBtn.className = 'close';
      closeBtn.innerHTML = '×';
      closeBtn.setAttribute('type', 'button');
      closeBtn.setAttribute('data-dismiss', 'alert');
      alertTag.innerHTML = msg;
      alertTag.appendChild(closeBtn);
      return this.$("#alert-wrapper").append(alertTag).fadeIn();
    };

    PostItemView.prototype._resetLeftPane = function() {
      this.model = new TradeOrSale.Item();
      this.$('#name').val('');
      this.$('#type').val('TRADE').change();
      this.$('#trade_with').val('');
      this.$('#quantity').val('1');
      this.$('#description').val('');
      this.$('#reason').val('');
      this.$('#is_draft').val('').removeAttr('checked');
      this.$(".control-group.error").removeClass('error');
      this.$(".help-inline.error").remove();
      return this.$("#tags").tagit("removeAll");
    };

    PostItemView.prototype._resetRightPane = function() {
      var index, _i, _len, _ref;
      this.$(".right-pane ul").remove();
      this.$(".right-pane .note").hide();
      this.$(".right-pane .drop-zone").show();
      this.$("#upload-stats").html('0%');
      this.fileDrop.files = [];
      this.fileDrop.files_count = 0;
      _ref = _.keys(this.uploadHandlers);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        index = _ref[_i];
        this.fileDrop.removeElement(index);
      }
      return this.uploadHandlers = {};
    };

    PostItemView.prototype._displayEachError = function() {
      var _this = this;
      if (!_.isEmpty(this.model.errors)) {
        return _.each(this.model.attributes, function(__, field) {
          return _this.displayError(field);
        });
      }
    };

    return PostItemView;

  })(Backbone.View);

  TradeOrSale.showPostItem = function() {
    var item;
    if (TradeOrSale.postItemView != null) {
      return TradeOrSale.postItemView.openPostItem();
    } else {
      item = new TradeOrSale.Item();
      TradeOrSale.postItemView = new PostItemView({
        model: item
      });
      $("#btn-post-item-parent").addClass('active');
      $("#global-region").html(TradeOrSale.postItemView.el);
      return $("#post-item #tags").tagit({
        singleField: true,
        allowSpaces: true,
        removeConfirmation: true,
        caseSensitive: false,
        availableTags: tagNames.pluck('name'),
        beforeTagAdded: function(e, ui) {
          var existingTags, tag, tagName;
          if (ui.duringInitialization) {
            return;
          }
          tagName = $(ui.tag).find('.tagit-label').text();
          tag = tagNames.findByName(tagName);
          if (!tag) {
            TradeOrSale.postItemView.showTagError(TradeOrSale.errorMsgs['createTagPermissionDenied']);
            return false;
          }
          existingTags = TradeOrSale.postItemView.model.get('tags');
          existingTags.push(tag);
          return TradeOrSale.postItemView.clearFieldError('tags');
        },
        afterTagRemoved: function(e, ui) {
          var existingTags, tag, tagName;
          tagName = $(ui.tag).find('.tagit-label').text();
          existingTags = TradeOrSale.postItemView.model.get('tags');
          tag = existingTags.findByName(tagName);
          if (tag) {
            return existingTags.remove(tag);
          }
        }
      });
    }
  };

  TradeOrSale.togglePostItem = function(e) {
    if ((TradeOrSale.postItemView != null) && $(TradeOrSale.postItemView.el).is(':visible')) {
      return TradeOrSale.postItemView.closePostItem(e);
    } else {
      return TradeOrSale.showPostItem();
    }
  };

}).call(this);
