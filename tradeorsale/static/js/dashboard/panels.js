// Generated by CoffeeScript 1.4.0
(function() {
  var ArchivedItemView, Dashboard, DashboardPanelView, DraftsItemView, OngoingItemView, PanelItems, ThumbImageView, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  Dashboard = {
    draftsPanel: null,
    ongoingPanel: null,
    archivedPanel: null,
    vent: new _.extend({}, Backbone.Events)
  };

  PanelItems = (function(_super) {

    __extends(PanelItems, _super);

    function PanelItems() {
      return PanelItems.__super__.constructor.apply(this, arguments);
    }

    PanelItems.prototype.model = TradeOrSale.Item;

    PanelItems.prototype.name = '';

    PanelItems.prototype.comparator = function(item) {
      return -item.get('id');
    };

    PanelItems.prototype.initialize = function(models, options) {
      return this.options = options;
    };

    PanelItems.prototype.url = function() {
      var lastItem, url;
      url = '/' + TradeOrSale.apiVersion + '/users/' + currentUser.id + '/items?status=' + this.options.name;
      lastItem = this.getLastItem();
      if (lastItem != null) {
        url += '&last=' + lastItem.get('id');
      }
      return url;
    };

    PanelItems.prototype.getLastItem = function() {
      return this.at(this.size() - 1);
    };

    return PanelItems;

  })(Backbone.Collection);

  DashboardPanelView = (function(_super) {

    __extends(DashboardPanelView, _super);

    function DashboardPanelView() {
      return DashboardPanelView.__super__.constructor.apply(this, arguments);
    }

    DashboardPanelView.prototype.template = '#dashboard-panel-template';

    DashboardPanelView.prototype.events = {
      'click .panel-footer .show-more': 'showMoreItems',
      'click h3 .collapse-panel': 'collapsePanel'
    };

    DashboardPanelView.prototype.initialize = function() {
      var _this = this;
      this.collection.each(function(item, i) {
        return item = _this._normalizeItem(item);
      });
      this.template = Handlebars.compile($(this.template).html());
      this.render();
      this.collection.bind('remove', this.removeItem, this);
      this.collection.bind('add', this.addItem, this);
      Dashboard.vent.on('ItemTabSwitch:' + this.options.name, this.itemTabSwitch, this);
      return Dashboard.vent.on('TogglePanelExpand:' + this.options.name, this.togglePanelExpand, this);
    };

    DashboardPanelView.prototype.render = function() {
      var _this = this;
      $(this.el).html(this.template({
        name: this.options.name,
        rawName: this.options.name.toLowerCase()
      }));
      if (this.collection.size() > 0) {
        this.$('.empty-panel').addClass('hidden');
      }
      return this.collection.each(function(item, i) {
        var isLast, itemView;
        isLast = i === (_this.collection.size() - 1) ? true : false;
        itemView = new Dashboard.itemClasses[_this.options.name]({
          model: item,
          isLast: isLast
        });
        return _this.$(".panel-items").append(itemView.el);
      });
    };

    DashboardPanelView.prototype.removeItem = function() {
      if (this.collection.size() === 0) {
        return this.$('.empty-panel').removeClass('hidden');
      } else {
        return this.$('.panel-items li:last-child').addClass('last');
      }
    };

    DashboardPanelView.prototype.addItem = function(item, options) {
      var index, isLast, itemView, previousItem, previousItemView;
      item = this._normalizeItem(item);
      isLast = this.collection.size() === 0 ? true : false;
      itemView = new Dashboard.itemClasses[this.options.name]({
        model: item,
        isLast: isLast
      });
      if (!this.$('.empty-panel').hasClass('hidden')) {
        this.$('.empty-panel').addClass('hidden');
      }
      if ((item.addingMechanism != null) && item.addingMechanism === 'prepend') {
        return this.$(".panel-items").prepend(itemView.el);
      } else {
        index = item.collection.indexOf(item);
        previousItem = item.collection.at(index - 1);
        if (previousItem != null) {
          previousItemView = this.$('#item-' + previousItem.id);
          previousItemView.after(itemView.el);
        } else {
          this.$(".panel-items").prepend(itemView.el);
        }
        this.$(".panel-items li.last").removeClass('last');
        return this.$(".panel-items li:last").addClass('last');
      }
    };

    DashboardPanelView.prototype.showMoreItems = function(e) {
      var _this = this;
      e.preventDefault();
      $(e.currentTarget).html('Please wait ...');
      return this.collection.fetch({
        add: true,
        success: function(collection, response, options) {
          return $(e.currentTarget).html('Show more');
        },
        error: function(collection, xhr, options) {
          return _this.options.addingMechanism = 'prepend';
        }
      });
    };

    DashboardPanelView.prototype.togglePanelExpand = function(type) {
      if (type === 'expand') {
        $(this.el).removeClass('span4').addClass('span8');
        this.$('.collapse-panel').removeClass('hidden');
        return $("#dashboard #archived").addClass('hidden');
      } else {
        $(this.el).removeClass('span8').addClass('span4');
        return $("#dashboard #archived").removeClass('hidden');
      }
    };

    DashboardPanelView.prototype.collapsePanel = function(e, switchTab) {
      if (switchTab == null) {
        switchTab = true;
      }
      e.preventDefault();
      this.$('.tab-pane-comments li').removeClass('shown');
      this.$('.tab-pane-comments li .subcomment').addClass('hidden');
      this.$('.tab-pane-comments li .meta .collapse').addClass('hidden');
      this.$('.tab-pane-comments li .meta .expand').removeClass('hidden');
      $(this.el).removeClass('span8').addClass('span4');
      this.$('h3 .collapse-panel').addClass('hidden');
      if (switchTab) {
        this.$('.nav-tabs .item-info-tab').tab('show');
      }
      return $("#dashboard #archived").removeClass('hidden');
    };

    DashboardPanelView.prototype.itemTabSwitch = function(e) {
      if (this.$('.nav-tabs .active .comments-tab').length === 0) {
        return this.collapsePanel(e, false);
      }
    };

    DashboardPanelView.prototype._normalizeItem = function(item) {
      var itemTags, tags;
      if (item.get('images') != null) {
        item.images.reset(item.get('images'));
        delete item.attributes.images;
      }
      tags = item.get('tags');
      if (!(tags instanceof TradeOrSale.ItemTags)) {
        itemTags = new TradeOrSale.ItemTags();
        itemTags.reset(tags);
        item.set('tags', itemTags);
      }
      return item;
    };

    return DashboardPanelView;

  })(Backbone.View);

  ThumbImageView = (function(_super) {

    __extends(ThumbImageView, _super);

    function ThumbImageView() {
      return ThumbImageView.__super__.constructor.apply(this, arguments);
    }

    ThumbImageView.prototype.template = '#image-thumb-template';

    ThumbImageView.prototype.className = 'thumb';

    ThumbImageView.prototype.tagName = 'li';

    ThumbImageView.prototype.events = {
      'click .preview': 'toggleImagePreview',
      'click .delete': 'deleteImage'
    };

    ThumbImageView.prototype.isEditingImages = false;

    ThumbImageView.prototype.initialize = function() {
      this.template = Handlebars.compile($(this.template).html());
      this.render();
      this.model.bind('destroy', this.destroyThumb, this);
      return Dashboard.vent.on('ToggleImageEditing:' + this.options.itemId, this.updateImageEditingOption, this);
    };

    ThumbImageView.prototype.render = function() {
      var image;
      image = this.model.toJSON();
      image['isEditingImages'] = this.options.isEditingImages;
      $(this.el).html(this.template(image));
      return $(this.el).attr('id', 'item-thumbnail-' + this.model.id);
    };

    ThumbImageView.prototype.destroyThumb = function() {
      this.undelegateEvents();
      this.remove();
      return this.unbind();
    };

    ThumbImageView.prototype.deleteImage = function(e) {
      e.preventDefault();
      if (this.options.isEditingImages) {
        return this.model.destroy();
      }
    };

    ThumbImageView.prototype.toggleImagePreview = function(e) {
      var existingImageId, existingLi, existingPreview, mediumImage, mediumPreview, targetImageId, targetLi;
      e.preventDefault();
      Dashboard.vent.trigger('ToggleImagePreview:' + this.options.itemId);
      if (this.options.isEditingImages) {
        return;
      }
      targetLi = $(e.currentTarget).parent('li');
      targetImageId = targetLi.attr('id').split('-')[2];
      targetLi.siblings('.active').removeClass('active');
      mediumPreview = $(e.currentTarget).parents('ul').siblings('.medium-image');
      mediumPreview.find('.preloader').remove();
      existingPreview = mediumPreview.find('img');
      existingImageId = null;
      if (existingPreview.length > 0) {
        existingPreview.addClass('hidden');
        existingImageId = existingPreview.attr('id').split('-')[2];
        existingLi = $(e.currentTarget).parents('ul').find('#item-thumbnail-' + existingImageId);
        existingLi.find('.preview').append(existingPreview);
        mediumPreview.html('').addClass('hidden');
      }
      if (this.$('.medium').length === 0) {
        mediumPreview.append(TradeOrSale.imagePreloader);
        mediumImage = document.createElement('img');
        mediumImage.className = 'medium hidden';
        mediumImage.setAttribute('id', 'item-image-' + this.model.id);
        $(mediumImage).bind('load', function() {
          mediumPreview.find('.preloader').remove();
          mediumPreview.append(mediumImage);
          return $(mediumImage).removeClass('hidden');
        });
        targetLi.addClass('active');
        mediumImage.src = $(e.currentTarget).attr('href');
      } else if ($(e.target).siblings('.medium').hasClass('hidden')) {
        if (existingImageId !== targetImageId) {
          mediumImage = $(e.target).siblings('.medium');
          $(e.currentTarget).parent('.thumb').addClass('active');
          mediumPreview.append(mediumImage);
        } else {
          existingLi.removeClass('active');
          mediumPreview.addClass('hidden');
          return;
        }
      }
      mediumPreview.find('img').removeClass('hidden');
      return mediumPreview.removeClass('hidden');
    };

    ThumbImageView.prototype.updateImageEditingOption = function(isEditingImages) {
      this.options.isEditingImages = isEditingImages;
      if (isEditingImages) {
        this.$('.delete').removeClass('hidden');
        return $(this.el).removeClass('active');
      } else {
        return this.$('.delete').addClass('hidden');
      }
    };

    return ThumbImageView;

  })(Backbone.View);

  DraftsItemView = (function(_super) {

    __extends(DraftsItemView, _super);

    function DraftsItemView() {
      this.clearImagePreview = __bind(this.clearImagePreview, this);
      return DraftsItemView.__super__.constructor.apply(this, arguments);
    }

    DraftsItemView.prototype.template = '#drafts-panel-item-template';

    DraftsItemView.prototype.tagName = 'li';

    DraftsItemView.prototype.events = {
      'click .name .item-name': 'toggleItem',
      'mouseover li .name': 'toggleNameEditLink',
      'mouseout li .name': 'toggleNameEditLink',
      'click li .name .edit-field-link': 'toggleNameEditForm',
      'click li .name .edit-field-form .cancel': 'toggleNameEditForm',
      'click li .name .edit-field-form .edit-field-btn': 'updateItemName',
      'mouseover .tab-pane-iteminfo .field': 'toggleFieldEditLink',
      'mouseout .tab-pane-iteminfo .field': 'toggleFieldEditLink',
      'click .tab-pane-iteminfo .field .edit-field-link': 'showFieldEditForm',
      'click .tab-pane-iteminfo .field .actions .cancel': 'hideFieldEditForm',
      'click .tab-pane-iteminfo .field .actions .edit-field-btn': 'updateField',
      'click .tab-pane-iteminfo > .actions .delete-item': 'deleteItem',
      'click .tab-pane-iteminfo .add-reason-link': 'showAddReasonForm',
      'click .field.type .btn': 'toggleItemType',
      'keypress .edit-field-form .edit-field': 'enterPressed',
      'click .tab-pane-iteminfo .add-tags-link': 'showAddTagsForm',
      'click .tab-pane-images .actions a.edit-images': 'editImages',
      'click .tab-pane-images .actions a.cancel-editing': 'cancelEditImages',
      'click .tab-pane-images .meta .upload': 'uploadMoreImages',
      'click .tab-pane-images .drop-zone li': 'removeDroppedImageThumb'
    };

    DraftsItemView.prototype.isEditingImages = false;

    DraftsItemView.prototype.switchingTypeState = null;

    DraftsItemView.prototype.attributes = function() {
      var attrs;
      attrs = {
        "class": (this.options.isLast ? 'last' : ''),
        id: 'item-' + this.model.id
      };
      return attrs;
    };

    DraftsItemView.prototype.initialize = function() {
      this.template = Handlebars.compile($(this.template).html());
      this.render();
      this.model.bind('remove', this.destroyItem, this);
      this.model.bind('destroy', this.destroyItem, this);
      this.model.bind('change:name', this.nameChanged, this);
      this.model.bind('change:trade_with', this.tradeWithChanged, this);
      this.model.bind('change:price', this.priceChanged, this);
      this.model.bind('change:quantity', this.quantityChanged, this);
      this.model.bind('change:description', this.descriptionChanged, this);
      this.model.bind('change:reason', this.reasonChanged, this);
      return Dashboard.vent.on('ToggleImagePreview:' + this.model.id, this.clearImagePreview, this);
    };

    DraftsItemView.prototype.render = function() {
      var item,
        _this = this;
      item = this.model.toJSON();
      item.isTrade = this.model.get('type') === 'TRADE' ? true : false;
      item.hasTags = this.model.get('tags').size() === 0 ? false : true;
      item.tags = this.model.get('tags').toJSON();
      $(this.el).html(this.template(item));
      this.model.pendingTags.reset();
      this.model.get('tags').each(function(tag) {
        return _this.model.pendingTags.push(tag);
      });
      this.$("#field-tags-" + this.model.id).tagit({
        singleField: true,
        allowSpaces: true,
        removeConfirmation: true,
        caseSensitive: false,
        availableTags: tagNames.pluck('name'),
        beforeTagAdded: function(e, ui) {
          var fieldParent, tag, tagName;
          if (ui.duringInitialization) {
            return;
          }
          tagName = $(ui.tag).find('.tagit-label').text();
          tag = tagNames.findByName(tagName);
          if (!tag) {
            _this.model.errors.tags = TradeOrSale.errorMsgs['createTagPermissionDenied'];
            _this.displayError('tags');
            return false;
          }
          _this.model.pendingTags.push(tag);
          fieldParent = _this.$('.field.tags');
          fieldParent.find('.error').remove();
          return fieldParent.removeClass('error');
        },
        afterTagRemoved: function(e, ui) {
          var tag, tagName;
          tagName = $(ui.tag).find('.tagit-label').text();
          tag = _this.model.pendingTags.findByName(tagName);
          if (tag) {
            return _this.model.pendingTags.remove(tag);
          }
        }
      });
      this.$("#field-tags-" + this.model.id).siblings('.tagit').find('.tagit-close').addClass('hidden');
      this.$("#field-tags-" + this.model.id).siblings('.tagit').addClass('readonly');
      this.model.images.each(function(image, i) {
        var imageView;
        imageView = new ThumbImageView({
          model: image,
          itemId: _this.model.id
        });
        return _this.$('.tab-pane-images > ul').append(imageView.el);
      });
      return this.model.images.bind('add', this.addImage, this);
    };

    DraftsItemView.prototype.nameChanged = function() {
      return this.$('.name .item-name').html(this.model.escape('name'));
    };

    DraftsItemView.prototype.tradeWithChanged = function() {
      return this.$('.trade_with p').html(this.model.escape('trade_with'));
    };

    DraftsItemView.prototype.priceChanged = function() {
      return this.$('.tab-pane-iteminfo .field.price p').html('PHP ' + this.model.escape('price') + ' each');
    };

    DraftsItemView.prototype.quantityChanged = function() {
      return this.$('.tab-pane-iteminfo .field.quantity p').html(this.model.escape('quantity') + ' in stock');
    };

    DraftsItemView.prototype.descriptionChanged = function() {
      var description;
      description = this.model.escape('description').replace(/\n/g, '<br />');
      return this.$('.tab-pane-iteminfo .field.description p').html(description);
    };

    DraftsItemView.prototype.reasonChanged = function() {
      var reason;
      reason = this.model.escape('reason').replace(/\n/g, '<br />');
      return this.$('.tab-pane-iteminfo .field.reason p').html(reason);
    };

    DraftsItemView.prototype.destroyItem = function() {
      this.undelegateEvents();
      this.remove();
      return this.unbind();
    };

    DraftsItemView.prototype.toggleItem = function(e) {
      e.preventDefault();
      if ($(this.el).hasClass('open')) {
        return $(this.el).removeClass('open');
      } else {
        return $(this.el).addClass('open');
      }
    };

    DraftsItemView.prototype.toggleNameEditLink = function(e) {
      e.preventDefault();
      if (this.$('.name .item-name').hasClass('hidden')) {
        return;
      }
      if ($(this.el).hasClass('open') && e.type === 'mouseover') {
        return this.$('.name .edit-field-link').removeClass('hidden');
      } else if (e.type === 'mouseout') {
        return this.$('.name .edit-field-link').addClass('hidden');
      }
    };

    DraftsItemView.prototype.toggleNameEditForm = function(e) {
      e.preventDefault();
      this.$('.name').removeClass('error');
      this.$('.name .edit-field-form .error').remove();
      this.$('.name .edit-field-form .edit-field').val(this.model.escape('name'));
      if (this.$('.name .edit-field-form').hasClass('hidden')) {
        this.$('.name .edit-field-form').removeClass('hidden');
        return this.$('.name .item-name, .name .edit-field-link').addClass('hidden');
      } else {
        this.$('.name .item-name, .name .edit-field-link').removeClass('hidden');
        return this.$('.name .edit-field-form').addClass('hidden');
      }
    };

    DraftsItemView.prototype.updateItemName = function(e) {
      var errorMsg, input;
      e.preventDefault();
      input = this.$('.name .edit-field-form .edit-field');
      this.model.set('name', input.val(), {
        validateAll: false
      });
      this.$('.name').removeClass('error');
      this.$('.name .edit-field-form .error').remove();
      if (!_.isEmpty(this.model.errors) && 'name' in this.model.errors) {
        this.$('.name').addClass('error');
        errorMsg = document.createElement('div');
        errorMsg.className = 'error';
        errorMsg.innerHTML = this.model.errors['name'];
        this.$('.name .edit-field-form').find('.error-marker').after(errorMsg);
        return;
      }
      this.model.save();
      return this.toggleNameEditForm(e);
    };

    DraftsItemView.prototype.toggleFieldEditLink = function(e) {
      var editFieldLink;
      e.preventDefault();
      if (!$(e.currentTarget).children('.edit-field-form').hasClass('hidden')) {
        return;
      }
      editFieldLink = $(e.currentTarget).find('.edit-field-link');
      if (editFieldLink.hasClass('hidden') && e.type === 'mouseover') {
        return editFieldLink.removeClass('hidden');
      } else if (e.type === 'mouseout') {
        return editFieldLink.addClass('hidden');
      }
    };

    DraftsItemView.prototype.showFieldEditForm = function(e) {
      var pTag,
        _this = this;
      e.preventDefault();
      if (!$(e.currentTarget).parents('.field').hasClass('tags')) {
        $(e.currentTarget).parent('h4').siblings('p').addClass('hidden');
      } else {
        pTag = $(e.currentTarget).parent('h4').siblings('p');
        pTag.find('.tagit').removeClass('readonly');
        pTag.find('.tagit .tagit-close').removeClass('hidden');
        pTag.find('.tagit-new input').focus();
        this.model.pendingTags.reset();
        this.model.get('tags').each(function(tag) {
          return _this.model.pendingTags.push(tag);
        });
      }
      $(e.currentTarget).addClass('hidden');
      return $(e.currentTarget).parent('h4').siblings('.edit-field-form').removeClass('hidden');
    };

    DraftsItemView.prototype.hideFieldEditForm = function(e) {
      var diffTags, editField, existingTags, fieldName, fieldParent, pendingTags,
        _this = this;
      e.preventDefault();
      fieldParent = $(e.currentTarget).parents('.field');
      if (fieldParent.hasClass('tags')) {
        fieldParent.find('p').removeClass('hidden');
        fieldParent.find('p .tagit').addClass('readonly');
        fieldParent.find('.tagit-new input').val('');
        existingTags = this.model.get('tags').pluck('name');
        pendingTags = this.model.pendingTags.pluck('name');
        if (this.model.get('tags').size() === 0) {
          fieldParent.addClass('hidden');
          fieldParent.siblings('.add-tags-link').removeClass('hidden');
          this.$("#field-tags-" + this.model.id).tagit("removeAll");
        } else {
          diffTags = _.difference(pendingTags, existingTags);
          _.each(diffTags, function(tagName) {
            return _this.$("#field-tags-" + _this.model.id).tagit("removeTagByName", tagName, false);
          });
          _.each(existingTags, function(tagName) {
            return _this.$("#field-tags-" + _this.model.id).tagit("createTag", tagName);
          });
        }
        fieldParent.find('p .tagit .tagit-close').addClass('hidden');
        this.model.pendingTags.reset();
      } else {
        editField = fieldParent.find('.edit-field');
        fieldName = editField.attr('id').split('-')[1];
        editField.val(this.model.get(fieldName));
      }
      fieldParent.removeClass('error');
      fieldParent.find('.error').remove();
      if (fieldName === 'reason' && this.model.get(fieldName) === '') {
        fieldParent.siblings('.add-reason-link').removeClass('hidden');
        fieldParent.addClass('hidden');
        return;
      }
      if (this.switchingTypeState === 'SALE') {
        this.$('.field.type .btn.trade').click();
        this.switchingTypeState = null;
        return;
      }
      fieldParent.find('.edit-field-link').removeClass('hidden');
      $(e.currentTarget).parents('.edit-field-form').addClass('hidden');
      return $(e.currentTarget).parents('.edit-field-form').siblings('p').removeClass('hidden');
    };

    DraftsItemView.prototype.updateField = function(e) {
      var fieldName, fieldParent, input, newItemTags,
        _this = this;
      e.preventDefault();
      fieldParent = $(e.currentTarget).parents('.field');
      if (!fieldParent.hasClass('tags')) {
        input = $(e.currentTarget).parents('.edit-field-form').find('.edit-field');
        fieldName = input.attr('id').split('-')[1];
        this.model.set(fieldName, input.val(), {
          validateAll: false
        });
      } else {
        newItemTags = new TradeOrSale.ItemTags();
        this.model.pendingTags.each(function(tag) {
          return newItemTags.push(tag);
        });
        this.model.pendingTags.reset();
        this.model.set('tags', newItemTags, {
          validateAll: false
        });
      }
      if (!_.isEmpty(this.model.errors)) {
        _.each(this.model.attributes, function(__, field) {
          return _this.displayError(field);
        });
        return;
      }
      if (this.switchingTypeState === 'SALE') {
        this.model.set('type', 'SALE', {
          validateAll: false
        });
        this.switchingTypeState = null;
      }
      this.model.save(null, {
        success: function(model, response, options) {
          var itemTags;
          _this.model = model;
          itemTags = new TradeOrSale.ItemTags();
          itemTags.reset(_this.model.get('tags'));
          return _this.model.set('tags', itemTags);
        }
      });
      return this.hideFieldEditForm(e);
    };

    DraftsItemView.prototype.deleteItem = function(e) {
      e.preventDefault();
      this.model.collection.remove(this.model);
      return this.model.destroy();
    };

    DraftsItemView.prototype.showAddReasonForm = function(e) {
      e.preventDefault();
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.add-reason').removeClass('hidden');
      return $(e.currentTarget).siblings('.add-reason').find('textarea').focus();
    };

    DraftsItemView.prototype.toggleItemType = function(e) {
      var newType;
      e.preventDefault();
      newType = $(e.currentTarget).html().toUpperCase();
      this.switchingTypeState = newType;
      if (newType === 'SALE' && this.model.get('type') === 'TRADE') {
        this.$('.field.price').removeClass('hidden');
        this.$('.field.price .edit-field-link').click();
        this.$('.field.price .edit-field').focus();
        return this.$('.field.trade_with').addClass('hidden');
      } else if (newType === 'TRADE' && this.model.get('type') === 'SALE') {
        this.$('.field.price').addClass('hidden');
        this.$('.field.price .edit-field').val('');
        this.$('.field.trade_with').removeClass('hidden');
        this.model.set({
          type: newType
        });
        this.model.set({
          price: ""
        });
        this.model.save();
        return this.switchingTypeState = null;
      } else if (newType === 'TRADE' && this.model.get('type') === 'TRADE') {
        this.$('.field.price').addClass('hidden');
        this.$('.field.price .edit-field').val('');
        this.$('.field.trade_with').removeClass('hidden');
        this.$('.field.price').removeClass('error');
        return this.$('.field.price .edit-field-form .error').remove();
      }
    };

    DraftsItemView.prototype.enterPressed = function(e) {
      if (e.keyCode === 13 && e.target.tagName !== 'TEXTAREA') {
        return $(e.currentTarget).parents('.edit-field-form').find('.actions .edit-field-btn').click();
      }
    };

    DraftsItemView.prototype.showAddTagsForm = function(e) {
      var pTag;
      e.preventDefault();
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.field.tags').removeClass('hidden');
      $(e.currentTarget).siblings('.field.tags').find('.edit-field-form').removeClass('hidden');
      pTag = $(e.currentTarget).siblings('.field.tags').find('p');
      pTag.find('.tagit').removeClass('readonly');
      pTag.find('.tagit .tagit-close').removeClass('hidden');
      return pTag.find('.tagit-new input').focus();
    };

    DraftsItemView.prototype.editImages = function(e) {
      var existingImageId, existingLi, existingPreview;
      e.preventDefault();
      this.clearImagePreview();
      existingPreview = this.$(".medium-image img");
      if (existingPreview.length > 0) {
        existingPreview.addClass('hidden');
        existingImageId = existingPreview.attr('id').split('-')[2];
        existingLi = $(e.currentTarget).parents('ul').find('#item-thumbnail-' + existingImageId);
        existingLi.find('.preview').append(existingPreview);
        this.$(".medium-image").html('').addClass('hidden');
      }
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.cancel-editing').removeClass('hidden');
      this.$(".drop-zone .help").show();
      this.$('.drop-zone').show();
      this.$(".meta").show();
      this.initFileDrop();
      this.isEditingImages = true;
      return Dashboard.vent.trigger('ToggleImageEditing:' + this.model.id, this.isEditingImages);
    };

    DraftsItemView.prototype.cancelEditImages = function(e) {
      e.preventDefault();
      this.$('.drop-zone').hide();
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.edit-images').removeClass('hidden');
      this.$(".meta").hide();
      this.$('.drop-zone').off();
      this.resetDropZone();
      this.isEditingImages = false;
      return Dashboard.vent.trigger('ToggleImageEditing:' + this.model.id, this.isEditingImages);
    };

    DraftsItemView.prototype.uploadMoreImages = function(e) {
      var _this = this;
      e.preventDefault();
      if (_.size(this.uploadHandlers) > 0) {
        return _.each(this.uploadHandlers, function(handlerInfo, i) {
          return handlerInfo.handler(i);
        });
      }
    };

    DraftsItemView.prototype.removeDroppedImageThumb = function(e) {
      var handlerInfo, index, indexToShift, subIndex, _i, _len;
      e.preventDefault();
      index = $(e.currentTarget).attr('class').split('-')[1];
      delete this.uploadHandlers[index];
      indexToShift = _.filter(_.keys(this.uploadHandlers), function(subIndex) {
        if (subIndex > index) {
          return true;
        } else {
          return false;
        }
      });
      indexToShift.sort();
      for (_i = 0, _len = indexToShift.length; _i < _len; _i++) {
        subIndex = indexToShift[_i];
        handlerInfo = this.uploadHandlers[subIndex];
        delete this.uploadHandlers[subIndex];
        this.uploadHandlers[subIndex - 1] = handlerInfo;
      }
      $(e.currentTarget).remove();
      if (this.$(".tab-pane-images .drop-zone li").length === 0) {
        this.resetDropZone();
      }
      return this.fileDrop.removeElement(index);
    };

    DraftsItemView.prototype.addImage = function(image) {
      var imageView;
      imageView = new ThumbImageView({
        model: image,
        itemId: this.model.id,
        isEditingImages: this.isEditingImages
      });
      return this.$('.tab-pane-images > ul').append(imageView.el);
    };

    DraftsItemView.prototype.resetDropZone = function() {
      this.fileDrop.files = [];
      this.fileDrop.files_count = 0;
      this.uploadHandlers = [];
      this.failedUploadCounter = 0;
      this.$(".tab-pane-images .drop-zone li").remove();
      this.$(".drop-zone ul").remove();
      this.$(".drop-zone .help").show();
      this.$(".tab-pane-images .meta .upload").attr('disabled', 'disabled');
      return this.$(".meta .upload-stats").html('0%');
    };

    DraftsItemView.prototype.clearImagePreview = function() {
      var li, occupant, position;
      if (this.$('.tab-pane-images .medium-thumb').length > 0) {
        li = this.$('.tab-pane-images .medium-thumb');
        position = li.attr('position');
        li.find('.medium').addClass('hidden');
        li.find('.small').removeClass('hidden');
        li.removeClass('medium-thumb');
        occupant = li.parents('ul').find('> li').eq(position);
        if (!occupant.is(li)) {
          return occupant.before(li);
        }
      }
    };

    DraftsItemView.prototype.initFileDrop = function() {
      var _this = this;
      this.uploadHandlers = {};
      this.failedUploadCounter = 0;
      return this.fileDrop = this.$('.drop-zone').filedrop({
        url: function() {
          return '/' + TradeOrSale.apiVersion + '/users/' + currentUser.id + '/items/' + _this.model.id + '/images';
        },
        paramname: 'image',
        data: {
          item_id: this.model.id
        },
        error: function(err, file) {
          switch (err) {
            case 'BrowserNotSupported':
              return console.log("Browser doesn't support html5");
            case 'TooManyFiles':
              return console.log("Uploading too many files");
            case 'FileTooLarge':
              return console.log("Uploading too large file");
            case 'FileTypeNotAllowed':
              _this.resetDropZone();
              console.log(_this.fileDrop);
              return console.log("Invalid file type");
          }
        },
        allowedfiletypes: ['image/jpeg', 'image/png'],
        maxfiles: 24,
        maxfilesize: 10,
        drop: function() {
          var ulTag;
          if (_this.$(".drop-zone ul").length === 0) {
            ulTag = document.createElement('ul');
            _this.$(".drop-zone .help").hide();
            _this.$(".drop-zone").append(ulTag);
          }
          return _this.$(".tab-pane-images .meta .upload").removeAttr("disabled");
        },
        uploadFinished: function(i, file, response, time) {
          var image;
          if (response.status === 'FAILED') {
            _this.$(".drop-zone .image-" + i).remove();
            return _this.failedUploadCounter += 1;
          } else {
            image = new TradeOrSale.ItemImage({
              id: response.sizes.id,
              original: response.sizes.original,
              medium: response.sizes.medium,
              small: response.sizes.small
            });
            return _this.model.images.add(image, {
              at: _this.model.images.size() - 1
            });
          }
        },
        progressUpdated: function(i, file, progress) {
          var newFilter;
          newFilter = 'grayscale(' + (100 - progress) + '%)';
          _this.$(".drop-zone .image-" + i + " img").css('filter', newFilter);
          _this.$(".drop-zone .image-" + i + " img").css('-webkit-filter', newFilter);
          return _this.$(".drop-zone .image-" + i + " img").css('-moz-filter', newFilter);
        },
        globalProgressUpdated: function(progress) {
          return _this.$(".meta .upload-stats").html(progress + '%');
        },
        beforeEach: function(i, file) {
          var imgTag, liTag, reader;
          liTag = document.createElement('li');
          liTag.className = 'image-' + i;
          imgTag = document.createElement('img');
          reader = new FileReader();
          reader.onload = function(e) {
            imgTag.src = e.target.result;
            liTag.appendChild(imgTag);
            return _this.$(".drop-zone ul").append(liTag);
          };
          return reader.readAsDataURL(file);
        },
        beforeSend: function(file, i, done) {
          return _this.uploadHandlers[i] = {
            handler: done,
            file: file
          };
        },
        afterAll: function() {
          return _this.resetDropZone();
        },
        removeElement: function(index) {
          var newIndex, nextIndex, remainingLi, subIndex, _i, _results;
          nextIndex = index + 1;
          remainingLi = _this.$(".tab-pane-images .drop-zone li").length;
          _results = [];
          for (subIndex = _i = nextIndex; nextIndex <= remainingLi ? _i <= remainingLi : _i >= remainingLi; subIndex = nextIndex <= remainingLi ? ++_i : --_i) {
            newIndex = subIndex - 1;
            _results.push(_this.$('.tab-pane-images .drop-zone li.image-' + subIndex).attr('class', 'image-' + newIndex));
          }
          return _results;
        },
        prepareDrop: function() {
          var index, _i, _len, _ref;
          if (_this.$(".drop-zone ul li").length > 0) {
            _this.$(".drop-zone ul li").remove();
            _ref = _.keys(_this.uploadHandlers);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              index = _ref[_i];
              _this.fileDrop.removeElement(index);
            }
            return _this.uploadHandlers = {};
          }
        }
      });
    };

    DraftsItemView.prototype.displayError = function(field) {
      var attachError, errorTag, fieldEl;
      fieldEl = this.$("#field-" + field + "-" + this.model.id);
      attachError = function(msg) {
        var errorMsg;
        fieldEl.parents(".field").addClass('error');
        errorMsg = document.createElement('div');
        errorMsg.className = 'error';
        errorMsg.innerHTML = msg;
        return errorMsg;
      };
      if (fieldEl.parents(".field").hasClass('error')) {
        fieldEl.parents(".field").removeClass('error');
        fieldEl.parents(".field").find('.error').remove();
      }
      if (field === 'tags' && _.has(this.model.errors, field)) {
        errorTag = attachError(this.model.errors[field]);
        fieldEl.parents('.error-marker').after(errorTag);
        return delete this.model.errors.tags;
      } else if ((this.model.errors != null) && field in this.model.errors) {
        errorTag = attachError(this.model.errors[field]);
        return fieldEl.parents('.edit-field-form').find('.error-marker').after(errorTag);
      }
    };

    return DraftsItemView;

  })(Backbone.View);

  OngoingItemView = (function(_super) {

    __extends(OngoingItemView, _super);

    function OngoingItemView() {
      this.clearImagePreview = __bind(this.clearImagePreview, this);
      return OngoingItemView.__super__.constructor.apply(this, arguments);
    }

    OngoingItemView.prototype.template = '#ongoing-panel-item-template';

    OngoingItemView.prototype.tagName = 'li';

    OngoingItemView.prototype.events = {
      'click .name .item-name': 'toggleItem',
      'mouseover li .name': 'toggleNameEditLink',
      'mouseout li .name': 'toggleNameEditLink',
      'click li .name .edit-field-link': 'toggleNameEditForm',
      'click li .name .edit-field-form .cancel': 'toggleNameEditForm',
      'click li .name .edit-field-form .edit-field-btn': 'updateItemName',
      'mouseover .tab-pane-iteminfo .field': 'toggleFieldEditLink',
      'mouseout .tab-pane-iteminfo .field': 'toggleFieldEditLink',
      'click .tab-pane-iteminfo .field .edit-field-link': 'showFieldEditForm',
      'click .tab-pane-iteminfo .field .actions .cancel': 'hideFieldEditForm',
      'click .tab-pane-iteminfo .field .actions .edit-field-btn': 'updateField',
      'click .tab-pane-iteminfo .add-reason-link': 'showAddReasonForm',
      'keypress .edit-field-form .edit-field': 'enterPressed',
      'click .tab-pane-iteminfo .add-tags-link': 'showAddTagsForm',
      'click .tab-pane-images .actions a.edit-images': 'editImages',
      'click .tab-pane-images .actions a.cancel-editing': 'cancelEditImages',
      'click .tab-pane-images .meta .upload': 'uploadMoreImages',
      'click .tab-pane-images .drop-zone li': 'removeDroppedImageThumb',
      'click .nav-tabs .comments-tab': 'switchToCommentsTab'
    };

    OngoingItemView.prototype.isEditingImages = false;

    OngoingItemView.prototype.attributes = function() {
      var attrs;
      attrs = {
        "class": (this.options.isLast ? 'last' : ''),
        id: 'item-' + this.model.id
      };
      return attrs;
    };

    OngoingItemView.prototype.initialize = function() {
      this.template = Handlebars.compile($(this.template).html());
      this.render();
      this.model.bind('remove', this.destroyItem, this);
      this.model.bind('destroy', this.destroyItem, this);
      this.model.bind('change:name', this.nameChanged, this);
      this.model.bind('change:trade_with', this.tradeWithChanged, this);
      this.model.bind('change:price', this.priceChanged, this);
      this.model.bind('change:quantity', this.quantityChanged, this);
      this.model.bind('change:description', this.descriptionChanged, this);
      this.model.bind('change:reason', this.reasonChanged, this);
      return Dashboard.vent.on('ToggleImagePreview:' + this.model.id, this.clearImagePreview, this);
    };

    OngoingItemView.prototype.render = function() {
      var item,
        _this = this;
      item = this.model.toJSON();
      item.isTrade = this.model.get('type') === 'TRADE' ? true : false;
      item.hasTags = this.model.get('tags').size() === 0 ? false : true;
      item.tags = this.model.get('tags').toJSON();
      $(this.el).html(this.template(item));
      this.model.pendingTags.reset();
      this.model.get('tags').each(function(tag) {
        return _this.model.pendingTags.push(tag);
      });
      this.$("#field-tags-" + this.model.id).tagit({
        singleField: true,
        allowSpaces: true,
        removeConfirmation: true,
        caseSensitive: false,
        availableTags: tagNames.pluck('name'),
        beforeTagAdded: function(e, ui) {
          var fieldParent, tag, tagName;
          if (ui.duringInitialization) {
            return;
          }
          tagName = $(ui.tag).find('.tagit-label').text();
          tag = tagNames.findByName(tagName);
          if (!tag) {
            _this.model.errors.tags = TradeOrSale.errorMsgs['createTagPermissionDenied'];
            _this.displayError('tags');
            return false;
          }
          _this.model.pendingTags.push(tag);
          fieldParent = _this.$('.field.tags');
          fieldParent.find('.error').remove();
          return fieldParent.removeClass('error');
        },
        afterTagRemoved: function(e, ui) {
          var tag, tagName;
          tagName = $(ui.tag).find('.tagit-label').text();
          tag = _this.model.pendingTags.findByName(tagName);
          if (tag) {
            return _this.model.pendingTags.remove(tag);
          }
        }
      });
      this.$("#field-tags-" + this.model.id).siblings('.tagit').find('.tagit-close').addClass('hidden');
      this.$("#field-tags-" + this.model.id).siblings('.tagit').addClass('readonly');
      this.model.images.each(function(image, i) {
        var imageView;
        imageView = new ThumbImageView({
          model: image,
          itemId: _this.model.id
        });
        return _this.$('.tab-pane-images > ul').append(imageView.el);
      });
      this.model.images.bind('add', this.addImage, this);
      return this.$('.nav-tabs a[data-toggle="tab"]').on('shown', function(e) {
        return Dashboard.vent.trigger('ItemTabSwitch:Ongoing', e);
      });
    };

    OngoingItemView.prototype.nameChanged = function() {
      return this.$('.name .item-name').html(this.model.escape('name'));
    };

    OngoingItemView.prototype.tradeWithChanged = function() {
      return this.$('.trade_with p').html(this.model.escape('trade_with'));
    };

    OngoingItemView.prototype.priceChanged = function() {
      return this.$('.tab-pane-iteminfo .field.price p').html('PHP ' + this.model.escape('price') + ' each');
    };

    OngoingItemView.prototype.quantityChanged = function() {
      return this.$('.tab-pane-iteminfo .field.quantity p').html(this.model.escape('quantity') + ' in stock');
    };

    OngoingItemView.prototype.descriptionChanged = function() {
      var description;
      description = this.model.escape('description').replace(/\n/g, '<br />');
      return this.$('.tab-pane-iteminfo .field.description p').html(description);
    };

    OngoingItemView.prototype.reasonChanged = function() {
      var reason;
      reason = this.model.escape('reason').replace(/\n/g, '<br />');
      return this.$('.tab-pane-iteminfo .field.reason p').html(reason);
    };

    OngoingItemView.prototype.destroyItem = function() {
      this.undelegateEvents();
      this.remove();
      return this.unbind();
    };

    OngoingItemView.prototype.toggleItem = function(e) {
      e.preventDefault();
      if ($(this.el).hasClass('open')) {
        return $(this.el).removeClass('open');
      } else {
        return $(this.el).addClass('open');
      }
    };

    OngoingItemView.prototype.toggleNameEditLink = function(e) {
      e.preventDefault();
      if (this.$('.name .item-name').hasClass('hidden')) {
        return;
      }
      if ($(this.el).hasClass('open') && e.type === 'mouseover') {
        return this.$('.name .edit-field-link').removeClass('hidden');
      } else if (e.type === 'mouseout') {
        return this.$('.name .edit-field-link').addClass('hidden');
      }
    };

    OngoingItemView.prototype.toggleNameEditForm = function(e) {
      e.preventDefault();
      this.$('.name').removeClass('error');
      this.$('.name .edit-field-form .error').remove();
      this.$('.name .edit-field-form .edit-field').val(this.model.escape('name'));
      if (this.$('.name .edit-field-form').hasClass('hidden')) {
        this.$('.name .edit-field-form').removeClass('hidden');
        return this.$('.name .item-name, .name .edit-field-link').addClass('hidden');
      } else {
        this.$('.name .item-name, .name .edit-field-link').removeClass('hidden');
        return this.$('.name .edit-field-form').addClass('hidden');
      }
    };

    OngoingItemView.prototype.updateItemName = function(e) {
      var errorMsg, input;
      e.preventDefault();
      input = this.$('.name .edit-field-form .edit-field');
      this.model.set('name', input.val(), {
        validateAll: false
      });
      this.$('.name').removeClass('error');
      this.$('.name .edit-field-form .error').remove();
      if (!_.isEmpty(this.model.errors) && 'name' in this.model.errors) {
        this.$('.name').addClass('error');
        errorMsg = document.createElement('div');
        errorMsg.className = 'error';
        errorMsg.innerHTML = this.model.errors['name'];
        this.$('.name .edit-field-form').find('.error-marker').after(errorMsg);
        return;
      }
      this.model.save();
      return this.toggleNameEditForm(e);
    };

    OngoingItemView.prototype.toggleFieldEditLink = function(e) {
      var editFieldLink;
      e.preventDefault();
      if (!$(e.currentTarget).children('.edit-field-form').hasClass('hidden')) {
        return;
      }
      editFieldLink = $(e.currentTarget).find('.edit-field-link');
      if (editFieldLink.hasClass('hidden') && e.type === 'mouseover') {
        return editFieldLink.removeClass('hidden');
      } else if (e.type === 'mouseout') {
        return editFieldLink.addClass('hidden');
      }
    };

    OngoingItemView.prototype.showFieldEditForm = function(e) {
      var pTag,
        _this = this;
      e.preventDefault();
      if (!$(e.currentTarget).parents('.field').hasClass('tags')) {
        $(e.currentTarget).parent('h4').siblings('p').addClass('hidden');
      } else {
        pTag = $(e.currentTarget).parent('h4').siblings('p');
        pTag.find('.tagit').removeClass('readonly');
        pTag.find('.tagit .tagit-close').removeClass('hidden');
        pTag.find('.tagit-new input').focus();
        this.model.pendingTags.reset();
        this.model.get('tags').each(function(tag) {
          return _this.model.pendingTags.push(tag);
        });
      }
      $(e.currentTarget).addClass('hidden');
      return $(e.currentTarget).parent('h4').siblings('.edit-field-form').removeClass('hidden');
    };

    OngoingItemView.prototype.hideFieldEditForm = function(e) {
      var diffTags, editField, existingTags, fieldName, fieldParent, pendingTags,
        _this = this;
      e.preventDefault();
      fieldParent = $(e.currentTarget).parents('.field');
      if (fieldParent.hasClass('tags')) {
        fieldParent.find('p').removeClass('hidden');
        fieldParent.find('p .tagit').addClass('readonly');
        fieldParent.find('.tagit-new input').val('');
        existingTags = this.model.get('tags').pluck('name');
        pendingTags = this.model.pendingTags.pluck('name');
        if (this.model.get('tags').size() === 0) {
          fieldParent.addClass('hidden');
          fieldParent.siblings('.add-tags-link').removeClass('hidden');
          this.$("#field-tags-" + this.model.id).tagit("removeAll");
        } else {
          diffTags = _.difference(pendingTags, existingTags);
          _.each(diffTags, function(tagName) {
            return _this.$("#field-tags-" + _this.model.id).tagit("removeTagByName", tagName, false);
          });
          _.each(existingTags, function(tagName) {
            return _this.$("#field-tags-" + _this.model.id).tagit("createTag", tagName);
          });
        }
        fieldParent.find('p .tagit .tagit-close').addClass('hidden');
        this.model.pendingTags.reset();
      } else {
        editField = fieldParent.find('.edit-field');
        fieldName = editField.attr('id').split('-')[1];
        editField.val(this.model.get(fieldName));
      }
      fieldParent.removeClass('error');
      fieldParent.find('.error').remove();
      if (fieldName === 'reason' && this.model.get(fieldName) === '') {
        fieldParent.siblings('.add-reason-link').removeClass('hidden');
        fieldParent.addClass('hidden');
        return;
      }
      fieldParent.find('.edit-field-link').removeClass('hidden');
      $(e.currentTarget).parents('.edit-field-form').addClass('hidden');
      return $(e.currentTarget).parents('.edit-field-form').siblings('p').removeClass('hidden');
    };

    OngoingItemView.prototype.updateField = function(e) {
      var fieldName, fieldParent, input, newItemTags,
        _this = this;
      e.preventDefault();
      fieldParent = $(e.currentTarget).parents('.field');
      if (!fieldParent.hasClass('tags')) {
        input = $(e.currentTarget).parents('.edit-field-form').find('.edit-field');
        fieldName = input.attr('id').split('-')[1];
        this.model.set(fieldName, input.val(), {
          validateAll: false
        });
      } else {
        newItemTags = new TradeOrSale.ItemTags();
        this.model.pendingTags.each(function(tag) {
          return newItemTags.push(tag);
        });
        this.model.pendingTags.reset();
        this.model.set('tags', newItemTags, {
          validateAll: false
        });
      }
      if (!_.isEmpty(this.model.errors)) {
        _.each(this.model.attributes, function(__, field) {
          return _this.displayError(field);
        });
        return;
      }
      this.model.save();
      return this.hideFieldEditForm(e);
    };

    OngoingItemView.prototype.showAddReasonForm = function(e) {
      e.preventDefault();
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.add-reason').removeClass('hidden');
      return $(e.currentTarget).siblings('.add-reason').find('textarea').focus();
    };

    OngoingItemView.prototype.enterPressed = function(e) {
      if (e.keyCode === 13 && e.target.tagName !== 'TEXTAREA') {
        return $(e.currentTarget).parents('.edit-field-form').find('.actions .edit-field-btn').click();
      }
    };

    OngoingItemView.prototype.showAddTagsForm = function(e) {
      var pTag;
      e.preventDefault();
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.field.tags').removeClass('hidden');
      $(e.currentTarget).siblings('.field.tags').find('.edit-field-form').removeClass('hidden');
      pTag = $(e.currentTarget).siblings('.field.tags').find('p');
      pTag.find('.tagit').removeClass('readonly');
      pTag.find('.tagit .tagit-close').removeClass('hidden');
      return pTag.find('.tagit-new input').focus();
    };

    OngoingItemView.prototype.editImages = function(e) {
      var existingImageId, existingLi, existingPreview;
      e.preventDefault();
      this.clearImagePreview();
      existingPreview = this.$(".medium-image img");
      if (existingPreview.length > 0) {
        existingPreview.addClass('hidden');
        existingImageId = existingPreview.attr('id').split('-')[2];
        existingLi = $(e.currentTarget).parents('ul').find('#item-thumbnail-' + existingImageId);
        existingLi.find('.preview').append(existingPreview);
        this.$(".medium-image").html('').addClass('hidden');
      }
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.cancel-editing').removeClass('hidden');
      this.$(".drop-zone .help").show();
      this.$('.drop-zone').show();
      this.$(".meta").show();
      this.initFileDrop();
      this.isEditingImages = true;
      return Dashboard.vent.trigger('ToggleImageEditing:' + this.model.id, this.isEditingImages);
    };

    OngoingItemView.prototype.cancelEditImages = function(e) {
      e.preventDefault();
      this.$('.drop-zone').hide();
      $(e.currentTarget).addClass('hidden');
      $(e.currentTarget).siblings('.edit-images').removeClass('hidden');
      this.$(".meta").hide();
      this.$('.drop-zone').off();
      this.resetDropZone();
      this.isEditingImages = false;
      return Dashboard.vent.trigger('ToggleImageEditing:' + this.model.id, this.isEditingImages);
    };

    OngoingItemView.prototype.uploadMoreImages = function(e) {
      var _this = this;
      e.preventDefault();
      if (_.size(this.uploadHandlers) > 0) {
        return _.each(this.uploadHandlers, function(handlerInfo, i) {
          return handlerInfo.handler(i);
        });
      }
    };

    OngoingItemView.prototype.removeDroppedImageThumb = function(e) {
      var handlerInfo, index, indexToShift, subIndex, _i, _len;
      e.preventDefault();
      index = $(e.currentTarget).attr('class').split('-')[1];
      delete this.uploadHandlers[index];
      indexToShift = _.filter(_.keys(this.uploadHandlers), function(subIndex) {
        if (subIndex > index) {
          return true;
        } else {
          return false;
        }
      });
      indexToShift.sort();
      for (_i = 0, _len = indexToShift.length; _i < _len; _i++) {
        subIndex = indexToShift[_i];
        handlerInfo = this.uploadHandlers[subIndex];
        delete this.uploadHandlers[subIndex];
        this.uploadHandlers[subIndex - 1] = handlerInfo;
      }
      $(e.currentTarget).remove();
      if (this.$(".tab-pane-images .drop-zone li").length === 0) {
        this.resetDropZone();
      }
      return this.fileDrop.removeElement(index);
    };

    OngoingItemView.prototype.addImage = function(image) {
      var imageView;
      imageView = new ThumbImageView({
        model: image,
        itemId: this.model.id,
        isEditingImages: this.isEditingImages
      });
      return this.$('.tab-pane-images > ul').append(imageView.el);
    };

    OngoingItemView.prototype.switchToCommentsTab = function(e) {
      e.preventDefault();
      Dashboard.vent.trigger('TogglePanelExpand:Ongoing', 'expand');
      return itemSocket.emit('comments_counter_clear', this.model.id);
    };

    OngoingItemView.prototype.resetDropZone = function() {
      this.fileDrop.files = [];
      this.fileDrop.files_count = 0;
      this.uploadHandlers = [];
      this.failedUploadCounter = 0;
      this.$(".tab-pane-images .drop-zone li").remove();
      this.$(".drop-zone ul").remove();
      this.$(".drop-zone .help").show();
      this.$(".tab-pane-images .meta .upload").attr('disabled', 'disabled');
      return this.$(".meta .upload-stats").html('0%');
    };

    OngoingItemView.prototype.clearImagePreview = function() {
      var li, occupant, position;
      if (this.$('.tab-pane-images .medium-thumb').length > 0) {
        li = this.$('.tab-pane-images .medium-thumb');
        position = li.attr('position');
        li.find('.medium').addClass('hidden');
        li.find('.small').removeClass('hidden');
        li.removeClass('medium-thumb');
        occupant = li.parents('ul').find('> li').eq(position);
        if (!occupant.is(li)) {
          return occupant.before(li);
        }
      }
    };

    OngoingItemView.prototype.initFileDrop = function() {
      var _this = this;
      this.uploadHandlers = {};
      this.failedUploadCounter = 0;
      return this.fileDrop = this.$('.drop-zone').filedrop({
        url: function() {
          return '/' + TradeOrSale.apiVersion + '/users/' + currentUser.id + '/items/' + _this.model.id + '/images';
        },
        paramname: 'image',
        data: {
          item_id: this.model.id
        },
        error: function(err, file) {
          switch (err) {
            case 'BrowserNotSupported':
              return console.log("Browser doesn't support html5");
            case 'TooManyFiles':
              return console.log("Uploading too many files");
            case 'FileTooLarge':
              return console.log("Uploading too large file");
            case 'FileTypeNotAllowed':
              _this.resetDropZone();
              return console.log("Invalid file type");
          }
        },
        allowedfiletypes: ['image/jpeg', 'image/png'],
        maxfiles: 24,
        maxfilesize: 10,
        drop: function() {
          var ulTag;
          if (_this.$(".drop-zone ul").length === 0) {
            ulTag = document.createElement('ul');
            _this.$(".drop-zone .help").hide();
            _this.$(".drop-zone").append(ulTag);
          }
          return _this.$(".tab-pane-images .meta .upload").removeAttr("disabled");
        },
        uploadFinished: function(i, file, response, time) {
          var image;
          if (response.status === 'FAILED') {
            _this.$(".drop-zone .image-" + i).remove();
            return _this.failedUploadCounter += 1;
          } else {
            image = new TradeOrSale.ItemImage({
              id: response.sizes.id,
              original: response.sizes.original,
              medium: response.sizes.medium,
              small: response.sizes.small
            });
            return _this.model.images.add(image, {
              at: _this.model.images.size() - 1
            });
          }
        },
        progressUpdated: function(i, file, progress) {
          var newFilter;
          newFilter = 'grayscale(' + (100 - progress) + '%)';
          _this.$(".drop-zone .image-" + i + " img").css('filter', newFilter);
          _this.$(".drop-zone .image-" + i + " img").css('-webkit-filter', newFilter);
          return _this.$(".drop-zone .image-" + i + " img").css('-moz-filter', newFilter);
        },
        globalProgressUpdated: function(progress) {
          return _this.$(".meta .upload-stats").html(progress + '%');
        },
        beforeEach: function(i, file) {
          var imgTag, liTag, reader;
          liTag = document.createElement('li');
          liTag.className = 'image-' + i;
          imgTag = document.createElement('img');
          reader = new FileReader();
          reader.onload = function(e) {
            imgTag.src = e.target.result;
            liTag.appendChild(imgTag);
            return _this.$(".drop-zone ul").append(liTag);
          };
          return reader.readAsDataURL(file);
        },
        beforeSend: function(file, i, done) {
          return _this.uploadHandlers[i] = {
            handler: done,
            file: file
          };
        },
        afterAll: function() {
          return _this.resetDropZone();
        },
        removeElement: function(index) {
          var newIndex, nextIndex, remainingLi, subIndex, _i, _results;
          nextIndex = index + 1;
          remainingLi = _this.$(".tab-pane-images .drop-zone li").length;
          _results = [];
          for (subIndex = _i = nextIndex; nextIndex <= remainingLi ? _i <= remainingLi : _i >= remainingLi; subIndex = nextIndex <= remainingLi ? ++_i : --_i) {
            newIndex = subIndex - 1;
            _results.push(_this.$('.tab-pane-images .drop-zone li.image-' + subIndex).attr('class', 'image-' + newIndex));
          }
          return _results;
        },
        prepareDrop: function() {
          var index, _i, _len, _ref;
          if (_this.$(".drop-zone ul li").length > 0) {
            _this.$(".drop-zone ul li").remove();
            _ref = _.keys(_this.uploadHandlers);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              index = _ref[_i];
              _this.fileDrop.removeElement(index);
            }
            return _this.uploadHandlers = {};
          }
        }
      });
    };

    OngoingItemView.prototype.displayError = function(field) {
      var attachError, errorTag, fieldEl;
      fieldEl = this.$("#field-" + field + "-" + this.model.id);
      attachError = function(msg) {
        var errorMsg;
        fieldEl.parents(".field").addClass('error');
        errorMsg = document.createElement('div');
        errorMsg.className = 'error';
        errorMsg.innerHTML = msg;
        return errorMsg;
      };
      if (fieldEl.parents(".field").hasClass('error')) {
        fieldEl.parents(".field").removeClass('error');
        fieldEl.parents(".field").find('.error').remove();
      }
      if (field === 'tags' && _.has(this.model.errors, field)) {
        errorTag = attachError(this.model.errors[field]);
        fieldEl.parents('.error-marker').after(errorTag);
        return delete this.model.errors.tags;
      } else if ((this.model.errors != null) && field in this.model.errors) {
        errorTag = attachError(this.model.errors[field]);
        return fieldEl.parents('.edit-field-form').find('.error-marker').after(errorTag);
      }
    };

    return OngoingItemView;

  })(Backbone.View);

  ArchivedItemView = (function(_super) {

    __extends(ArchivedItemView, _super);

    function ArchivedItemView() {
      return ArchivedItemView.__super__.constructor.apply(this, arguments);
    }

    ArchivedItemView.prototype.template = '#archived-panel-item-template';

    ArchivedItemView.prototype.tagName = 'li';

    ArchivedItemView.prototype.events = {
      'click .name .item-name': 'toggleItem',
      'click .actions .clone-item': 'cloneItem'
    };

    ArchivedItemView.prototype.attributes = function() {
      var attrs;
      attrs = {
        "class": (this.options.isLast ? 'last' : ''),
        id: 'item-' + this.model.id
      };
      return attrs;
    };

    ArchivedItemView.prototype.initialize = function() {
      this.template = Handlebars.compile($(this.template).html());
      this.render();
      return this.model.bind('change:transaction_date', this.transactionDateChanged, this);
    };

    ArchivedItemView.prototype.render = function() {
      var item;
      item = this.model.toJSON();
      item.isTrade = this.model.get('type') === 'TRADE' ? true : false;
      item.typePastense = this.model.get('type') === 'TRADE' ? 'traded' : 'sold';
      item.suffix = this.model.get('original_quantity') > 1 ? 'items' : 'item';
      return $(this.el).html(this.template(item));
    };

    ArchivedItemView.prototype.toggleItem = function(e) {
      e.preventDefault();
      if ($(this.el).hasClass('open')) {
        return $(this.el).removeClass('open');
      } else {
        return $(this.el).addClass('open');
      }
    };

    ArchivedItemView.prototype.transactionDateChanged = function() {
      return this.$('.tab-pane .field.created span').html(this.model.escape('transaction_date'));
    };

    ArchivedItemView.prototype.cloneItem = function(e) {
      var url;
      e.preventDefault();
      url = this.model.url() + '?action=clone';
      return $.ajax({
        type: "GET",
        url: url,
        dataType: "json",
        success: function(rawItem) {
          var clonedItem;
          clonedItem = new TradeOrSale.Item(rawItem);
          TradeOrSale.Dashboard.draftsPanel.collection.add(clonedItem);
          $('#item-' + clonedItem.id + ' .name .item-name').click();
          $('#item-' + clonedItem.id + ' .name .edit-field-link').click();
          return $('#item-' + clonedItem.id + ' .name .edit-field-form .edit-field').focus().select();
        }
      });
    };

    return ArchivedItemView;

  })(Backbone.View);

  Dashboard.showPanels = function(draftItems, ongoingItems, archivedItems) {
    var getMovedItem, items;
    if (!(Dashboard.draftsPanel != null)) {
      items = new PanelItems(null, {
        name: 'drafts'
      });
      items.reset(draftItems);
      Dashboard.draftsPanel = new DashboardPanelView({
        el: $("#drafts"),
        collection: items,
        name: "Drafts"
      });
    }
    if (!(Dashboard.ongoingPanel != null)) {
      items = new PanelItems(null, {
        name: 'ongoing'
      });
      items.reset(ongoingItems);
      Dashboard.ongoingPanel = new DashboardPanelView({
        el: $("#ongoing"),
        collection: items,
        name: "Ongoing"
      });
    }
    if (!(Dashboard.archivedPanel != null)) {
      items = new PanelItems(null, {
        name: 'archived'
      });
      items.reset(archivedItems);
      Dashboard.archivedPanel = new DashboardPanelView({
        el: $("#archived"),
        collection: items,
        name: "Archived"
      });
    }
    getMovedItem = function(originPanel, destinationPanel, itemId) {
      var item;
      item = originPanel.collection.get(itemId);
      originPanel.collection.remove(item);
      destinationPanel.collection.add(item);
      return item;
    };
    $("#drafts-panel, #ongoing-panel").sortable({
      connectWith: "#drafts-panel, #ongoing-panel",
      placeholder: "item-drop-zone",
      dropOnEmpty: true,
      handle: ".drag-handle",
      receive: function(e, ui) {
        var destinationPanel, destinationPanelId, item, itemId, originPanel, originPanelId;
        originPanelId = $(ui.sender).attr('id');
        destinationPanelId = $(ui.item).parents('.panel-items').attr('id');
        itemId = $(ui.item).attr('id').split('-')[1];
        item = null;
        originPanel = null;
        destinationPanel = null;
        if (originPanelId === 'ongoing-panel') {
          originPanel = Dashboard.ongoingPanel;
          destinationPanel = Dashboard.draftsPanel;
          item = getMovedItem(originPanel, destinationPanel, itemId);
          return item.save({
            is_draft: true
          });
        }
      }
    });
    $("#ongoing-panel, #archived-panel").sortable({
      connectWith: "#drafts-panel, #archived-panel",
      placeholder: "item-drop-zone",
      dropOnEmpty: true,
      handle: ".drag-handle",
      receive: function(e, ui) {
        var destinationPanel, destinationPanelId, item, itemId, originPanel, originPanelId;
        originPanelId = $(ui.sender).attr('id');
        destinationPanelId = $(ui.item).parents('.panel-items').attr('id');
        itemId = $(ui.item).attr('id').split('-')[1];
        item = null;
        originPanel = null;
        destinationPanel = null;
        switch (originPanelId) {
          case 'drafts-panel':
            originPanel = Dashboard.draftsPanel;
            destinationPanel = Dashboard.ongoingPanel;
            item = getMovedItem(originPanel, destinationPanel, itemId);
            return item.save({
              is_draft: false
            });
          case 'ongoing-panel':
            originPanel = Dashboard.ongoingPanel;
            if (destinationPanelId === 'drafts-panel') {
              destinationPanel = Dashboard.draftsPanel;
            } else {
              destinationPanel = Dashboard.archivedPanel;
            }
            item = getMovedItem(originPanel, destinationPanel, itemId);
            if (destinationPanelId === 'drafts-panel') {
              return item.save({
                is_draft: true
              });
            } else {
              return item.save({
                is_draft: false,
                status: 'archived'
              });
            }
        }
      }
    });
    return $("#drafts-panel, #ongoing-panel, #archived-panel").disableSelection();
  };

  Dashboard.PanelItems = PanelItems;

  Dashboard.ThumbImageView = ThumbImageView;

  Dashboard.itemClasses = {
    "Drafts": DraftsItemView,
    "Ongoing": OngoingItemView,
    "Archived": ArchivedItemView
  };

  TradeOrSale.Dashboard = Dashboard;

}).call(this);
